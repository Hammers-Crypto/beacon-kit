// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	deposit "github.com/berachain/beacon-kit/mod/execution/pkg/deposit"
	mock "github.com/stretchr/testify/mock"
)

// BeaconBlockBody is an autogenerated mock type for the BeaconBlockBody type
type BeaconBlockBody[DepositT interface{}, ExecutionPayloadT deposit.ExecutionPayload] struct {
	mock.Mock
}

type BeaconBlockBody_Expecter[DepositT interface{}, ExecutionPayloadT deposit.ExecutionPayload] struct {
	mock *mock.Mock
}

func (_m *BeaconBlockBody[DepositT, ExecutionPayloadT]) EXPECT() *BeaconBlockBody_Expecter[DepositT, ExecutionPayloadT] {
	return &BeaconBlockBody_Expecter[DepositT, ExecutionPayloadT]{mock: &_m.Mock}
}

// GetDeposits provides a mock function with given fields:
func (_m *BeaconBlockBody[DepositT, ExecutionPayloadT]) GetDeposits() []DepositT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeposits")
	}

	var r0 []DepositT
	if rf, ok := ret.Get(0).(func() []DepositT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DepositT)
		}
	}

	return r0
}

// BeaconBlockBody_GetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeposits'
type BeaconBlockBody_GetDeposits_Call[DepositT interface{}, ExecutionPayloadT deposit.ExecutionPayload] struct {
	*mock.Call
}

// GetDeposits is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[DepositT, ExecutionPayloadT]) GetDeposits() *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT]{Call: _e.mock.On("GetDeposits")}
}

func (_c *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT]) Return(_a0 []DepositT) *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT]) RunAndReturn(run func() []DepositT) *BeaconBlockBody_GetDeposits_Call[DepositT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *BeaconBlockBody[DepositT, ExecutionPayloadT]) GetExecutionPayload() ExecutionPayloadT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// BeaconBlockBody_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type BeaconBlockBody_GetExecutionPayload_Call[DepositT interface{}, ExecutionPayloadT deposit.ExecutionPayload] struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[DepositT, ExecutionPayloadT]) GetExecutionPayload() *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT]{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT]) Return(_a0 ExecutionPayloadT) *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT]) RunAndReturn(run func() ExecutionPayloadT) *BeaconBlockBody_GetExecutionPayload_Call[DepositT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlockBody creates a new instance of BeaconBlockBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlockBody[DepositT interface{}, ExecutionPayloadT deposit.ExecutionPayload](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlockBody[DepositT, ExecutionPayloadT] {
	mock := &BeaconBlockBody[DepositT, ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
