// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	mock "github.com/stretchr/testify/mock"
)

// ExecutionPayload is an autogenerated mock type for the ExecutionPayload type
type ExecutionPayload struct {
	mock.Mock
}

type ExecutionPayload_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionPayload) EXPECT() *ExecutionPayload_Expecter {
	return &ExecutionPayload_Expecter{mock: &_m.Mock}
}

// GetNumber provides a mock function with given fields:
func (_m *ExecutionPayload) GetNumber() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNumber")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumber'
type ExecutionPayload_GetNumber_Call struct {
	*mock.Call
}

// GetNumber is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter) GetNumber() *ExecutionPayload_GetNumber_Call {
	return &ExecutionPayload_GetNumber_Call{Call: _e.mock.On("GetNumber")}
}

func (_c *ExecutionPayload_GetNumber_Call) Run(run func()) *ExecutionPayload_GetNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetNumber_Call) Return(_a0 math.U64) *ExecutionPayload_GetNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetNumber_Call) RunAndReturn(run func() math.U64) *ExecutionPayload_GetNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionPayload creates a new instance of ExecutionPayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionPayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionPayload {
	mock := &ExecutionPayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
